---
import type { GetStaticPaths } from "astro";

import { getCollection } from "astro:content";

import BaseLayout from "../../layouts/BaseLayout.astro";

export const getStaticPaths = (async () => {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((blog) => ({
    params: {
      slug: blog.slug,
    },
    props: {
      blog: blog,
    },
  }));
}) satisfies GetStaticPaths;

const { blog } = Astro.props;
const { Content } = await blog.render();
---

<style lang="scss">
  @media screen and (min-width: 320px) and (max-width: 767px) {
    article {
      padding: 0 8% 0 8%;
      margin: 10% 0 10% 0%;

      h1 {
        font-size: 2.25rem;
      }
    }
  }

  @media screen and (min-width: 768px) {
    article {
      margin: 5% 15% 5% 15%;

      h1 {
        font-size: 3rem;
      }
    }
  }

  article {
    font-family: Poppins;
    font-size: 1.125rem;
    font-style: normal;
    font-weight: 500;
    line-height: normal;
    color: #ecf8ff;
    display: flex;
    flex-direction: column;
    gap: 1rem;

    h1 {
      font-family: Poppins;
      font-style: normal;
      font-weight: 700;
      line-height: 142%;
    }

    .summary {
      color: rgba(154, 159, 166, 0.95);
      font-size: 1.15rem;
      line-height: 160%;
    }

    time {
      color: rgba(154, 159, 166, 0.9);
      font-style: normal;
      font-size: 1.15rem;
    }

    img {
      margin: 5% 0;
    }
  }

  // Reference: https://docs.astro.build/en/guides/styling/#global-styles
  article :global(p) {
    color: #ecf8ff;
    font-family: Poppins;
    font-size: 1.125rem;
    font-style: normal;
    font-weight: 500;
    line-height: 180%;
  }

  article :global(a) {
    color: #ecf8ff;
    text-decoration-thickness: 1px;
    text-underline-offset: 4px;
  }

  article :global(ol) {
    list-style: decimal;
    padding-left: 2%;
    line-height: normal;
  }

  article :global(pre) {
    padding: 1rem;
  }

  article :global(code) {
    font-size: 0.9rem;
  }
</style>

<BaseLayout
  title={blog.data.title}
  description={blog.data.description}
  slug={`/blog/${blog.slug}`}
  imageUrl={new URL(blog.data.coverImage.url)}
  imageAlt={blog.data.coverImage.alt}
>
  <article>
    <h1>{blog.data.title}</h1>
    <time
      >Published on {
        blog.data.publishedDate.toLocaleDateString(undefined, {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
        })
      }
    </time>
    <p class="summary">{blog.data.description}</p>
    <img src={blog.data.coverImage.url} alt={blog.data.coverImage.alt} />
    <Content />
  </article>
</BaseLayout>
