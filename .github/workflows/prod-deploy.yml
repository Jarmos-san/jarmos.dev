name: Production Deployment

on:
  push:
    tags:
      - v*

jobs:
  code-quality-checks:
    name: Code QA Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.PAT }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          run_install: false
          package_json_file: ./web/package.json
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run Code Quality Checks
        run: pnpm run lint

      - name: Run Prettier to Check for Formatting Issues
        run: pnpm run format:check

  deploy-production:
    name: Production Deployment
    defaults:
      run:
        working-directory: ./terraform
    runs-on: ubuntu-latest
    needs: code-quality-checks
    environment:
      name: Production
      # FIXME: Update the URL to be dynamically fetched by Terraform
      url: https://jarmos.dev
    env:
      PG_CONN_STR: ${{ secrets.PG_CONN_STR }}
      VERCEL_API_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.PAT }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3.0.0

      - name: Initialise the Environment for Terraform
        run: terraform init -input=false

      - name: Deploy to Production
        run: |
          terraform plan -var "vercel_api_token=${VERCEL_API_TOKEN}" -out=tfplan -input=false
          terraform apply -input=false tfplan
